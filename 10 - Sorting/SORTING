I don't need to learn all the sorting algorithms - and their code 
I should have concept what are they

Bubble Sort: 
              starting with the 1st element of array, 
              take first number, and keep swapping until a greater value is found.
              then, take that greater value and continue that Sort,
              keep swapping, and at the end, greatest value will be fixed on the end of array.

              then start again, with the 1st index and repeat.
              and do it according to array.length 

              O(n^2) for time and O(1) for space 

Selection Sort:
              start with array[0], it will the smallest value at 1st, 
              grab that, 
              then go through each element until smaller value than the grabbed one is found
              grat that new smaller,
              then look thru next elements, if more smaller is available - if no,
              swap that last grabbed smaller value with array[0]

              next time, start with array[1]
              and when the last smallest value is found, swap that with array[1]

              and repeat, until all array is sorted

              O(n^2) for time and O(1) for space 

Insertion Sort: 
              This technique could go to linear time - O(n)
              because this technique is mostly used in almost sorted arrays 

              1st 2 elements will be compared and their positions will be changed 
              then we will go to 3rd element and will compare with previous - and it will take place it's position 
              and same will happen with every element

Merge Sort: 
              This technique could go to O(n logn) , better than O(n^2)
              
              DIVIDE & CONQUER
              i.e when we find have a phone book, names are divided, so we could skip over to the unrelated names 
              
              what we will do here ? we have 6 5 3 1 8 7 2 4 -- we will divide everything 
              6 5 3 1 8 7 2 4 => 6 5 3 1   8 7 2 4 => 6 5   3 1   8 7   24
              => 6   5   3   1   8   7   2  4
              we will compare 6 and 5 , 3 and 1 and so on 
              => 5 6   1 3   7 8  2 4
              then we will compare 5 6 with 1 3 and so on 
              => 1 3 5 6    2 4 7 8 
              then, will compare those 2 
              => 1 2 3 4 5 6 7 8

Quick Sort: 
              This technique could go to O(n logn) , better than O(n^2) -- Average Case
              o(n^2) -- Worst Case 

              DIVIDE & CONQUER
              i.e when we find have a phone book, names are divided, so we could skip over to the unrelated names 
              
              for example i have an array -- 
              i need to select a random number, it could be last one or any -- it will be called pivot element
              then i will transfer all numbers less than the pivot element -- to the left of pivot
              and all greater than pivot - on its right 

              this positioning is unique , 
              pivot (could last number) element will start checking from 1st element of array 
              if 1st element of array is greater than pivot - so 1st element have to be positioned after pivot 

              for example - pivot is at 4rth index and 1st element at 0 index
              pivot will have to step back and place 1st element at 4th --
              so pivot will move to 3rd index -- and whatever is already positioned at 3rd index -- 
                                                      will go to 1st element's position, at index 0

              then, a time will come, when all the values less than pivot will be on pivot's left 
              and greater values will be at right 
              but all the values at laft and at right wouldn't be sorted -- 
              SO- AT THAT TIME, array will be splitted in to two , one array, left - 2nd array for right values 

              and same process will continue -- i have figure - for better understanding
                                                in the same folder


WHEN TO USE WHAT ?

Insertion sort: when we have smaller input and mostly sorted -- this is really fast -- uses little space 
Bubble Sort: Never gonna use it -- just being taught for educational purpose - not efficient 
Selection Sort: same review as Bubble 
Merge Sort: It is good because Time complexity's best, average and worst case is O(n logn) -- better than n^2
            but it will cost enough in memory - as worst case for space is O(n) - so not good if we care about memory 
Quick Sort: this is better than Merge as it's best and average cases for time are O(n logn) - (same as merge)
            and space is O(log n) -- far better than merge 
            but it's time worst case (if we take wrong pivot element) is O(n^2)
            so if we care about time's worst case .. then, merge is better 
Heap Sort is good in Big-O than merge and quick - but it's slower -- and we use quick and merge most of the time 
Radix and Counting sorts are used for fixed amount of (Only Integers) data type -- they are fastest
              